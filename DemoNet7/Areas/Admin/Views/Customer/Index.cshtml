@model IEnumerable<MyStockLibrary.DataAccess.KhachHang>
@using X.PagedList;
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "QL Khách hàng";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<header class="panel-heading">
    Quản lý Khách hàng
</header>
<div class="panel-body">
    <p>
        @Html.ActionLink("Tạo mới","Create","Customer", null, new {@class="btn btn-danger"})
    </p>
    <div class="text-align">
        @if (TempData["Message"] != null)
        {
            <div class="alert alert-danger">

                @TempData["Message"]
            </div>
        }
    </div>
    <div class="row form-body">
        <div class="form-group mb-4">
        @using (Html.BeginForm("Index", "Customer", FormMethod.Get))
        {
                <div class="row col-lg-4">
                @Html.TextBox("SearchString", Context.Request.Query["SearchString"],null,new {@class="form-control", @placeholder="Nhập từ khoá cần tìm kiếm"})
            </div>
             <div class="col-lg-4">
        <select id="CityId" name="CityName" class="form-control">
            <option value="">-- Select City --</option>
            @foreach (var city in ViewBag.City as List<SelectListItem>)
            {
                @*city.Value*@
                <option value="@city.Text">@city.Text</option>
            }
        </select>
                 </div>
            <div class="col-lg-2">
                <input type="submit" class="btn btn-danger" value="Tìm kiếm" />
            </div
            <div style="clear: both"></div>
        }
        </div>
         @using (Html.BeginForm("DeleteMultiple", "Customer", FormMethod.Post))
        {
        <div class="form-group">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                             @{
                                var sortBy = Context.Request.Query["sortby"] == "id" ? "iddesc" : "id";
                            }
                            <a href="@Url.Action("Index","Customer",new {sortBy=sortBy,SearchString=@Context.Request.Query["SearchString"]})">
                            @Html.DisplayNameFor(model => model.MaKhachHang)
                            </a>
                        </th>
                        <th>
                            @{
                                sortBy = Context.Request.Query["sortby"] == "name" ? "namedesc" : "name";
                            }
                            <a href="@Url.Action("Index","Customer",new {sortBy=sortBy,SearchString=@Context.Request.Query["SearchString"]})">
                            @Html.DisplayNameFor(model => model.TenKhachHang)
                            </a>
                        </th>
                        <th>
                             @{
                                sortBy = Context.Request.Query["sortby"] == "address" ? "addressdesc" : "address";
                            }
                             <a href="@Url.Action("Index","Customer",new {sortBy=sortBy,SearchString=@Context.Request.Query["SearchString"]})">
                            @Html.DisplayNameFor(model => model.DiaChi)
                            </a>
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.DienThoai)
                        </th>
                        <th>
                            Chức năng
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.MaKhachHang)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TenKhachHang)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DiaChi)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DienThoai)
                                </td>
                                <td>
                                    <input type="checkbox" name="SelectedCatDelete" value="@item.MaKhachHang">
                                    @Html.ActionLink("Sửa", "Edit", new {  id=item.MaKhachHang  },new {@class="text-danger"}) |
                                    @Html.ActionLink("Chi tiết", "Details", new { /* id=item.PrimaryKey */ }) |
                                    @Html.ActionLink("Xoá", "Delete", new {id=item.MaKhachHang },new {@class="text-danger"})
                                    <a href="#" class="delete-link" data-id="@item.MaKhachHang" data-confirm="Bạn có thật sự muốn xoá?" data-toggle="modal" data-target="#confirmModal">Xoá</a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>
           <div class="form-group">
<button type="submit" class="btn btn-danger">Delete Selected Rows</button>
          </div>

          <!-- Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Xác nhận xóa</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p id="confirmMessage"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-danger" id="confirmDelete">Xóa</button>
      </div>
    </div>
  </div>
</div>
          }
                  <div class="form-group">
        @Html.PagedListPager((IPagedList) Model, page => Url.Action("Index", new {page = page,
SearchString = @Context.Request.Query["SearchString"],sortby = @Context.Request.Query["sortby"]}),
new X.PagedList.Web.Common.PagedListRenderOptions {
    LiElementClasses = new string[] {"page-item"},
    PageClasses = new string[] { "page-link" }
})
    </div>
    </div>
</div>
@section Scripts{
     <script type="text/javascript" src="~/Scripts/jquery-ui.js"></script>
    <Script>
        $(document).on("click", ".delete-link", function (e) {
  e.preventDefault();
  var id = $(this).data("id");
  var confirmMessage = $(this).data("confirm");

  $("#confirmMessage").text(confirmMessage);
  $("#confirmDelete").data("id", id); // Lưu trữ ID để sử dụng trong xử lý xóa

  $("#confirmModal").modal("show");
});
$(document).on("click", "#confirmDelete", function (e) {
    e.preventDefault();
    var id = $(this).data("id");
    //if (confirm($(this).data("confirm"))) {
        $.ajax({
            url: "/Admin/Customer/DeleteId/" + id,
            dataType: "json",
            type: "POST",
            contentType: "application/json;charset=UTF-8",
            success: function (res) {
                if (res.status == true) {
                    window.location.href = '/Admin/Customer';
                    //$("#getCodeModal").modal("toggle");
                }
            },
             error: function (errormessage) {
        alert(errormessage.responseText);
    }
        });
    //}
});

var common = {
                init: function () {
                    common.registerEvent();
                },
                registerEvent: function () {
                    $("#SearchString").autocomplete({
                        minLength: 0,
                        source: function (request, response) {
                            $.ajax({
                                url: "/Admin/Customer/ListName",
                                dataType: "json",
                                data: {
                                    q: request.term
                                },
                                success: function (res) {
                                    response(res.data);
                                },
                                error: function(response){
                                    alert(response.responseText);
                                }
                            });
                        },
                        focus: function (event, ui) {
                            $("#SearchString").val(ui.item.label);
                            return false;
                        },
                        select: function (event, ui) {
                            $("#SearchString").val(ui.item.label);
                            return false;
                        }
                    })
                        .autocomplete("instance")._renderItem = function (ul, item) {
                            return $("<li>")
                                .append("<a>" + item.label + "</a>")
                                .appendTo(ul);
                        };
                }
            }
            common.init();
    </Script>
}